{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Welcome to www.containertips.dev I post content about: Docker Kubernetes Container Orchestrators Containers in General. Devops Courses I will soon start launching new docker and kubernetes courses, obviously in espa\u00f1ol ; they will be aimed to all the spanish speaking community that will be encouraged by these courses.","title":"Home"},{"location":"#welcome","text":"Welcome to www.containertips.dev I post content about: Docker Kubernetes Container Orchestrators Containers in General. Devops","title":"Welcome"},{"location":"#courses","text":"I will soon start launching new docker and kubernetes courses, obviously in espa\u00f1ol ; they will be aimed to all the spanish speaking community that will be encouraged by these courses.","title":"Courses"},{"location":"about/","text":"About Me - Marcos Cano Personal Info Howdy, My name is Marcos Cano . I live in Guatemala City Central America Aqui se habla espa\u00f1ol I have the privilege of being the Docker Community Leader in Guatemala . Since 2017 I have the priviliged of being part of the large group of Community Leader around the globe. DCA I'm also a Docker Certified Associate What I love ? To teach and share. Docker Kubernetes To containerized everything that I can. Empower others in becoming better. Coffee Music Something Professional I have helped in the migration of multiple monoliths to microservices I specialized in Devops: CI/CD Docker Cloud Native You can find more about me in my LinkedIn page :","title":"About"},{"location":"about/#about-me-marcos-cano","text":"","title":"About Me - Marcos Cano"},{"location":"about/#personal-info","text":"Howdy, My name is Marcos Cano . I live in Guatemala City Central America Aqui se habla espa\u00f1ol","title":"Personal Info"},{"location":"about/#i-have-the-privilege-of-being-the-docker-community-leader-in-guatemala","text":"Since 2017 I have the priviliged of being part of the large group of Community Leader around the globe. DCA I'm also a Docker Certified Associate","title":"I have the privilege of being the Docker Community Leader in Guatemala."},{"location":"about/#what-i-love","text":"To teach and share. Docker Kubernetes To containerized everything that I can. Empower others in becoming better. Coffee Music","title":"What I love  ?"},{"location":"about/#something-professional","text":"I have helped in the migration of multiple monoliths to microservices I specialized in Devops: CI/CD Docker Cloud Native You can find more about me in my LinkedIn page :","title":"Something Professional"},{"location":"blog/","text":"Blog","title":"Blog"},{"location":"blog/#blog","text":"","title":"Blog"},{"location":"contact/","text":"","title":"Contact"},{"location":"blog/2020/hello/","text":"Hello 2020","title":"Hello 2020"},{"location":"blog/2020/hello/#hello-2020","text":"","title":"Hello 2020"},{"location":"devops/","text":"Devops","title":"Devops"},{"location":"devops/#devops","text":"","title":"Devops"},{"location":"docker/","text":"What is Docker?","title":"What is Docker?"},{"location":"docker/#what-is-docker","text":"","title":"What is Docker?"},{"location":"kubernetes/","text":"Kubernetes","title":"Kubernetes"},{"location":"kubernetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"kubernetes/helm/","text":"Helm Workshop: Docker Online Meetups El proposito es poder escribir Helm v3 Charts Formato del Taller Este taller tiene 4 secciones importantes. Getting Started Charts Subcharts Templating Objetivo Vamos a traducir el app popular de Docker voting-app demo e instalarla en un Cluster de k8 Comenzaremos con un chart sencillo y de ahi avanzaremos. La aplicaion de Docker tiene 5 componentes: A front-end for users to vote (dockersamples/examplevotingapp_vote:before) A back-end that tallies votes (dockersamples/examplevotingapp_vote:before - The voting frontend dockersamples/examplevotingapp_worker) An admin interface to see the results (dockersamples/examplevotingapp_result:before) Redis cache (redis:alpine) A PostgreSQL database (postgres:9.4)","title":"Intro"},{"location":"kubernetes/helm/#helm-workshop-docker-online-meetups","text":"El proposito es poder escribir Helm v3 Charts","title":"Helm Workshop: Docker Online Meetups"},{"location":"kubernetes/helm/#formato-del-taller","text":"Este taller tiene 4 secciones importantes. Getting Started Charts Subcharts Templating","title":"Formato del Taller"},{"location":"kubernetes/helm/#objetivo","text":"Vamos a traducir el app popular de Docker voting-app demo e instalarla en un Cluster de k8 Comenzaremos con un chart sencillo y de ahi avanzaremos. La aplicaion de Docker tiene 5 componentes: A front-end for users to vote (dockersamples/examplevotingapp_vote:before) A back-end that tallies votes (dockersamples/examplevotingapp_vote:before - The voting frontend dockersamples/examplevotingapp_worker) An admin interface to see the results (dockersamples/examplevotingapp_result:before) Redis cache (redis:alpine) A PostgreSQL database (postgres:9.4)","title":"Objetivo"},{"location":"kubernetes/helm/1.start/","text":"Getting Started with Helm Instale Helm en su maquina Prerequisitos Un cluster de k8 disponible Cliente Helm (helm cli) Mac $ brew install kubernetes-helm Ubuntu: $ sudo snap install helm --classic Windows: $ choco install kubernetes-helm mas formas para instalar en la pagina oficial Install Configuracion y version apuntar al contexto adecuado: $ kubectl config current-context docker-for-desktop Mostremos la version instalada $ helm version version.BuildInfo{Version: v3.1.2 , GitCommit: d878d4d45863e42fd5cff6743294a11d28a9abce , GitTreeState: clean , GoVersion: go1.13.8 } Usando Helm Algunos comands de helm helm help: Show help. You can get more info on a command by doing helm COMMAND --help, such as helm list --help helm search STRING: Find charts to install helm install -n NAME CHART: Install something (create a release). Example: helm install -n my-test stable/wordpress helm status NAME: Get the status of a release helm delete NAME: Delete the release. Example: helm delete my-test","title":"1. Comenzando"},{"location":"kubernetes/helm/1.start/#getting-started-with-helm","text":"Instale Helm en su maquina","title":"Getting Started with Helm"},{"location":"kubernetes/helm/1.start/#prerequisitos","text":"Un cluster de k8 disponible","title":"Prerequisitos"},{"location":"kubernetes/helm/1.start/#cliente-helm-helm-cli","text":"","title":"Cliente Helm (helm cli)"},{"location":"kubernetes/helm/1.start/#mac","text":"$ brew install kubernetes-helm","title":"Mac"},{"location":"kubernetes/helm/1.start/#ubuntu","text":"$ sudo snap install helm --classic","title":"Ubuntu:"},{"location":"kubernetes/helm/1.start/#windows","text":"$ choco install kubernetes-helm mas formas para instalar en la pagina oficial Install","title":"Windows:"},{"location":"kubernetes/helm/1.start/#configuracion-y-version","text":"apuntar al contexto adecuado: $ kubectl config current-context docker-for-desktop Mostremos la version instalada $ helm version version.BuildInfo{Version: v3.1.2 , GitCommit: d878d4d45863e42fd5cff6743294a11d28a9abce , GitTreeState: clean , GoVersion: go1.13.8 }","title":"Configuracion y version"},{"location":"kubernetes/helm/1.start/#usando-helm","text":"Algunos comands de helm helm help: Show help. You can get more info on a command by doing helm COMMAND --help, such as helm list --help helm search STRING: Find charts to install helm install -n NAME CHART: Install something (create a release). Example: helm install -n my-test stable/wordpress helm status NAME: Get the status of a release helm delete NAME: Delete the release. Example: helm delete my-test","title":"Usando Helm"},{"location":"kubernetes/helm/2.charts/","text":"Charts Helm le llama Chart a su unidad mas pequena de instalacion y deployment. Un chart es un 'paquete' que contiene por lo menos: Chart.yaml : describe datos y metadata del Chart. templates/ : transforma los k8-manifest a manifests que se pueden desplegar. values.yaml : que define parametros con los cuales uno puede manejar y configurar con el Chart. !!! info Por lo menos estos 3 componentes se pueden empaquetar en un Chart el cual puede ser desplegado en cualquier ambiente y usualmente se pueden \"subir y guardar\" en un repositorio como https://hub.helm.sh . Charts Docu Creating a Chart To get started, we need to create a new directory. In this guide, we will be using linux filepath conventions, though Windows-style filepaths work with similar commands. Start by running the Helm command to create a new basic chart: $ helm create voter This will create a new directory named voter, and scaffold it out as follows: voter/ \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 charts \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 NOTES.txt \u2502 \u251c\u2500\u2500 _helpers.tpl \u2502 \u251c\u2500\u2500 deployment.yaml \u2502 \u251c\u2500\u2500 ingress.yaml \u2502 \u2514\u2500\u2500 service.yaml \u2514\u2500\u2500 values.yaml We will start by modifying the Chart.yaml Chart.yaml All we need to change in this file is the description. apiVersion: v1 # The chart schema version, always v1 for Helm 2 version: 0.1.0 # The version of the chart. Change this for each release. appVersion: \"1.0\" # The version of the main app in this chart. OPTIONAL description: An example cloud native voting app name: voter Save this. You can verify that you correctly entered the data by running: $ helm inspect chart ./voter apiVersion: v1 appVersion: \"1.0\" description: An example cloud native voting app name: voter version: 0.1.0 Next, we'll start working with Helm templates Configuring the Front-End Take a look at the values.yaml file generated for us: Default values for voter. This is a YAML-formatted file. Declare variables to be passed into your templates. replicaCount: 1 image: repository: nginx tag: stable pullPolicy: IfNotPresent nameOverride: \"\" fullnameOverride: \"\" service: type: ClusterIP port: 80 ingress: enabled: false annotations: {} # kubernetes.io/ingress.class: nginx # kubernetes.io/tls-acme: \"true\" path: / hosts: - chart-example.local tls: [] # - secretName: chart-example-tls # hosts: # - chart-example.local resources: {} # We usually recommend not to specify default resources and to leave this as a conscious # choice for the user. This also increases chances charts run on environments with little # resources, such as Minikube. If you do want to specify resources, uncomment the following # lines, adjust them as necessary, and remove the curly braces after 'resources:'. # limits: # cpu: 100m # memory: 128Mi # requests: # cpu: 100m # memory: 128Mi nodeSelector: {} tolerations: [] affinity: {} This default values file has standard configurable parameters pre-defined. These parameters are used by files in templates. The default Helm chart defines three Kubernetes resources: A Deployment for running a microservice A Service for routing traffic to that microservice An Ingress that can optionally be turn on to allow external traffic to access your app It just so happens that we need these things for our example. So to get started, we'll change the default values to make use of them. In the images section, make the following changes: Point repository to dockersamples/examplevotingapp_vote Set tag to before And also change one thing in service: port: 5000 (See the images list in the main README for a quick description of each.) Once you've done that, you will have a runnable chart that we can test. We'll be able to install it, but not use it. If you are on Azure, add --set service.type=LoadBalancer to the end of the following command $ helm install -n voting-app ./voter ... some info Note that both a deployment and a service are created for you. If you are using Docker Desktop, you'll be able to see your new app by pointing a web browser at localhost:5000. For other clusters, flag down one of us and ask about how to configure it. At this point, your new app won't work, because it will be trying to contact a Redis database that is not there. In the next section, we'll look at adding some other parts.","title":"2. Charts"},{"location":"kubernetes/helm/2.charts/#charts","text":"Helm le llama Chart a su unidad mas pequena de instalacion y deployment. Un chart es un 'paquete' que contiene por lo menos: Chart.yaml : describe datos y metadata del Chart. templates/ : transforma los k8-manifest a manifests que se pueden desplegar. values.yaml : que define parametros con los cuales uno puede manejar y configurar con el Chart. !!! info Por lo menos estos 3 componentes se pueden empaquetar en un Chart el cual puede ser desplegado en cualquier ambiente y usualmente se pueden \"subir y guardar\" en un repositorio como https://hub.helm.sh . Charts Docu Creating a Chart To get started, we need to create a new directory. In this guide, we will be using linux filepath conventions, though Windows-style filepaths work with similar commands. Start by running the Helm command to create a new basic chart: $ helm create voter This will create a new directory named voter, and scaffold it out as follows: voter/ \u251c\u2500\u2500 Chart.yaml \u251c\u2500\u2500 charts \u251c\u2500\u2500 templates \u2502 \u251c\u2500\u2500 NOTES.txt \u2502 \u251c\u2500\u2500 _helpers.tpl \u2502 \u251c\u2500\u2500 deployment.yaml \u2502 \u251c\u2500\u2500 ingress.yaml \u2502 \u2514\u2500\u2500 service.yaml \u2514\u2500\u2500 values.yaml We will start by modifying the Chart.yaml Chart.yaml All we need to change in this file is the description. apiVersion: v1 # The chart schema version, always v1 for Helm 2 version: 0.1.0 # The version of the chart. Change this for each release. appVersion: \"1.0\" # The version of the main app in this chart. OPTIONAL description: An example cloud native voting app name: voter Save this. You can verify that you correctly entered the data by running: $ helm inspect chart ./voter apiVersion: v1 appVersion: \"1.0\" description: An example cloud native voting app name: voter version: 0.1.0 Next, we'll start working with Helm templates Configuring the Front-End Take a look at the values.yaml file generated for us:","title":"Charts"},{"location":"kubernetes/helm/2.charts/#default-values-for-voter","text":"","title":"Default values for voter."},{"location":"kubernetes/helm/2.charts/#this-is-a-yaml-formatted-file","text":"","title":"This is a YAML-formatted file."},{"location":"kubernetes/helm/2.charts/#declare-variables-to-be-passed-into-your-templates","text":"replicaCount: 1 image: repository: nginx tag: stable pullPolicy: IfNotPresent nameOverride: \"\" fullnameOverride: \"\" service: type: ClusterIP port: 80 ingress: enabled: false annotations: {} # kubernetes.io/ingress.class: nginx # kubernetes.io/tls-acme: \"true\" path: / hosts: - chart-example.local tls: [] # - secretName: chart-example-tls # hosts: # - chart-example.local resources: {} # We usually recommend not to specify default resources and to leave this as a conscious # choice for the user. This also increases chances charts run on environments with little # resources, such as Minikube. If you do want to specify resources, uncomment the following # lines, adjust them as necessary, and remove the curly braces after 'resources:'. # limits: # cpu: 100m # memory: 128Mi # requests: # cpu: 100m # memory: 128Mi nodeSelector: {} tolerations: [] affinity: {} This default values file has standard configurable parameters pre-defined. These parameters are used by files in templates. The default Helm chart defines three Kubernetes resources: A Deployment for running a microservice A Service for routing traffic to that microservice An Ingress that can optionally be turn on to allow external traffic to access your app It just so happens that we need these things for our example. So to get started, we'll change the default values to make use of them. In the images section, make the following changes: Point repository to dockersamples/examplevotingapp_vote Set tag to before And also change one thing in service: port: 5000 (See the images list in the main README for a quick description of each.) Once you've done that, you will have a runnable chart that we can test. We'll be able to install it, but not use it. If you are on Azure, add --set service.type=LoadBalancer to the end of the following command $ helm install -n voting-app ./voter","title":"Declare variables to be passed into your templates."},{"location":"kubernetes/helm/2.charts/#some-info","text":"Note that both a deployment and a service are created for you. If you are using Docker Desktop, you'll be able to see your new app by pointing a web browser at localhost:5000. For other clusters, flag down one of us and ask about how to configure it. At this point, your new app won't work, because it will be trying to contact a Redis database that is not there. In the next section, we'll look at adding some other parts.","title":"... some info"},{"location":"kubernetes/helm/3.subcharts/","text":"","title":"3. Subcharts"},{"location":"kubernetes/helm/4.templates/","text":"","title":"4. Templates"}]}